<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <client_script><![CDATA[function() {  /* widget controller */  var c = this;}]]></client_script>
        <controller_as>c</controller_as>
        <css>$brand-primary: #99ca3c;

$step: 2;
$job-step-color: rgba(0, 0, 0, 0.3);
$job-step-color--hover: rgba(255, 255, 255, 0.3);
$job-step-color--active: #ca3c98;



/*awkward workaround for shitty internal SASS parser*/

$selector: "nth-child(#{$step})";

@while $step &lt;=10 {
    .career__path:#{$selector} {
        background-color: darken($brand-primary, 3%*$step);
        &amp;::before,
        &amp;::after {
            background: darken($brand-primary, 3%*$step);
        }
    }
    $step: $step + 1;
    $selector: "nth-child(#{$step})";
}

.career {
    color: #fff;
    a {
        color: #fff;
    }
}

.career__path {
    background-color: $brand-primary;
    display: flex;
    position: relative;
    &amp;::before,
    &amp;::after {
        content: '';
        position: absolute;
        left: 2em;
        height: 50%;
        width: 100%;
        background: $brand-primary;
        z-index: -1;
    }

    &amp;::before {
        top: 0;
        transform: skew(15deg);
    }

    &amp;::after {
        bottom: 0;
        transform: skew(-15deg);
    }
}

.path__title {
    text-transform: uppercase;
    font-weight: 100;
    text-align: right;
    padding-right: 0.5em;
}

.path__image {
    background: silver;
    display: flex;
    box-shadow: 9px 0px 20px -15px #111;
    img {
        width: 150px;
        padding: 1em;
    }
}

.path__jobs {
    list-style: none;
    display: flex;
    margin: 0 15px 15px 15px;
    height: 40px;
    text-align: center;
    padding: 0;
}

.job-item {
    a {
        color: #fff;
        display: flex;
        flex-direction: column;
        justify-content: center;
        background: $job-step-color;
        text-decoration: none;
        position: relative;
        height: 40px;
        padding: 0 10px 0 5px;
        text-align: center;
        margin-right: 23px;
        transition: all .5s;
    }
    &amp;:first-child {
        a {
            padding-left: 15px;
            border-radius: 6px 0 0 6px;
            &amp;::before {
                border: none;
            }
        }
    }
    &amp;:last-child {
        a {
            padding-right: 15px;
            border-radius: 0 6px 6px 0;
            &amp;::after {
                border: none;
            }
        }
    }

    a {
        &amp;::before,
        &amp;::after {
            content: "";
            position: absolute;
            top: 0;
            border: 0 solid $job-step-color;
            border-width: 20px 10px;
            width: 0;
            height: 0;
            transition: all .5s;
        }
        &amp;::before {
            left: -20px;
            border-left-color: transparent;
        }
        &amp;::after {
            left: 100%;
            border-color: transparent;
            border-left-color: $job-step-color;
        }
        &amp;:hover {
            background-color: $job-step-color--hover;
            &amp;::before {
                border-color: $job-step-color--hover;
                border-left-color: transparent;
            }
            &amp;::after {
                border-left-color: $job-step-color--hover;
            }
        }
    }

}

.job-item--active {
    a {
        background-color: $job-step-color--active;
        &amp;::before {
            border-color: $job-step-color--active;
            border-left-color: transparent;
        }
        &amp;::after {
            border-left-color: $job-step-color--active;
        }
    }
}



.path__description {
    flex-grow: 1;
}

.career__path:not(:first-child) .path__description {
    box-shadow: 0px -7px 10px -10px #000;
}

svg {
    position: absolute;
    z-index: 1;
    pointer-events: none;
}

path {
    fill: none;
    stroke-width: 2px;
    stroke: $job-step-color;
    stroke-dasharray: 4;
}

.arrow__head {
    stroke-dasharray: 0;
    fill: #000;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>gvs-career-path-overview</id>
        <internal>false</internal>
        <link><![CDATA[function (scope, element, attrs) {
    connectAll();
    $(window).on('resize', connectAll);

    scope.$on('destroy', function () {
        $(window).off('resize');
    });

    //helper functions, it turned out chrome doesn't support Math.sgn() 
    function signum(x) {
        return (x < 0) ? -1 : 1;
    }

    function absolute(x) {
        return (x < 0) ? -x : x;
    }

    function drawPath(svg, path, startX, startY, endX, endY) {
        // get the path's stroke width (if one wanted to be  really precize, one could use half the stroke size)
        var stroke = parseFloat(path.css("stroke-width"));
        // check if the svg is big enough to draw the path, if not, set heigh/width
        if (svg.attr("height") < endY) svg.attr("height", endY);
        if (svg.attr("width") < (startX + stroke)) svg.attr("width", (startX + stroke));
        if (svg.attr("width") < (endX + stroke)) svg.attr("width", (endX + stroke));

        var deltaX = (endX - startX) * 0.15;
        var deltaY = (endY - startY) * 0.15;
        // for further calculations which ever is the shortest distance
        var delta = deltaY < absolute(deltaX) ? deltaY : absolute(deltaX);

        // set sweep-flag (counter/clock-wise)
        // if start element is closer to the left edge,
        // draw the first arc counter-clockwise, and the second one clock-wise
        var arc1 = 0;
        var arc2 = 1;
        if (startX > endX) {
            arc1 = 1;
            arc2 = 0;
        }
        // draw tha pipe-like path
        // 1. move a bit down, 2. arch,  3. move a bit to the right, 4.arch, 5. move down to the end 
        path.attr("d", "M" + startX + " " + startY +
            " V" + (startY + delta) +
            " A" + delta + " " + delta + " 0 0 " + arc1 + " " + (startX + delta * signum(deltaX)) + " " + (startY + 2 * delta) +
            " H" + (endX - delta * signum(deltaX)) +
            " A" + delta + " " + delta + " 0 0 " + arc2 + " " + endX + " " + (startY + 3 * delta) +
            " V" + endY);
    }

    function connectElements(svg, path, startElem, endElem) {
        var svgContainer = element.find("svg");

        // if first element is lower than the second, swap!
        if (startElem.offset().top > endElem.offset().top) {
            var temp = startElem;
            startElem = endElem;
            endElem = temp;
            path.attr("marker-start", "url(#arrow-reverse)");
        } else {
            path.attr("marker-end", "url(#arrow)");
        }

        // get (top, left) corner coordinates of the svg container   
        var svgTop = svgContainer.offset().top;
        var svgLeft = svgContainer.offset().left;

        // get (top, left) coordinates for the two elements
        var startCoord = startElem.offset();
        var endCoord = endElem.offset();

        // calculate path's start (x,y)  coords
        // we want the x coordinate to visually result in the element's mid point
        var startX = startCoord.left + 0.5 * startElem.outerWidth() - svgLeft; // x = left offset + 0.5*width - svg's left offset
        var startY = startCoord.top + startElem.outerHeight() - svgTop; // y = top offset + height - svg's top offset

        // calculate path's end (x,y) coords
        var endX = endCoord.left + 0.5 * endElem.outerWidth() - svgLeft;
        var endY = endCoord.top - svgTop;

        // call function for drawing the path
        drawPath(svg, path, startX, startY, endX, endY);
    }

    function resetSVGsize() {
        element.find("svg").attr("height", "0");
        element.find("svg").attr("width", "0");
    }


    function connectAll() {
        // connect all the paths you want!
        connectElements(element.find("svg"), $("#path1"), $("#qa_engineer"), $("#tester"));
        connectElements(element.find("svg"), $("#path2"), $("#qa_engineer"), $("#consultant"));

    }




}]]></link>
        <name>GVS Career path overview</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {  /* populate the 'data' object */  /* e.g., data.table = $sp.getValue('table'); */})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-02-22 07:59:55</sys_created_on>
        <sys_id>37b92d7b4f9cd34003abc4b18110c744</sys_id>
        <sys_mod_count>173</sys_mod_count>
        <sys_name>GVS Career path overview</sys_name>
        <sys_package display_value="[GVS] Career Path" source="x_52098_gvs_career">ddf621734f5cd34003abc4b18110c7c9</sys_package>
        <sys_policy/>
        <sys_scope display_value="[GVS] Career Path">ddf621734f5cd34003abc4b18110c7c9</sys_scope>
        <sys_update_name>sp_widget_37b92d7b4f9cd34003abc4b18110c744</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-02-26 13:31:04</sys_updated_on>
        <template><![CDATA[<h1 class="font-thin">Career path</h1>
<svg width="0" height="0">
<defs>
    <marker id="arrow" markerWidth="5" markerHeight="5" viewBox="0 -5 10 10" refX="10" refY="0" orient="auto">
        <path d="M0,-5L10,0L0,5" class="arrow__head"></path>
    </marker>
    <marker id="arrow-reverse" markerWidth="5" markerHeight="5" viewBox="0 -5 10 10" refX="10" refY="0" orient="270">
        <path d="M0,-5L10,0L0,5" class="arrow__head"></path>
    </marker>
</defs>
<path id="path1"/>
<path id="path2"/>
</svg>
<div class="career">

    <div class="career__path">
        <div class="path__image"><img src='https://svgshare.com/i/5R8.svg' title='boss' /></div>
        <div class="path__description">
            <h2 class="path__title">Technical consultancy</h2>
            <ol class="path__jobs">
                <li class="job-item"><a href="">Newbie</a></li>
                <li class="job-item job-item--active"><a href="">Consultant</a></li>
                <li class="job-item"><a href="">Breadcrumb</a></li>
                <li class="job-item"><a href="">Getting started</a></li>
                <li class="job-item"><a href="">Download</a></li>
                <li class="job-item"><a href="">upload consultant</a></li>
            </ol>
            <ol class="path__jobs">
                <li class="job-item"><a href="">Newbie</a></li>
                <li class="job-item" id="consultant"><a href="">Consultant</a></li>
                <li class="job-item"><a href="">Download</a></li>
                <li class="job-item"><a href="">upload consultant</a></li>
            </ol>
        </div>
    </div>



    <div class="career__path">
        <div class="path__image"><img src='https://svgshare.com/i/5QH.svg' title='' /></div>
        <div class="path__description">
            <h2 class="path__title">QA</h2>
            <ol class="path__jobs">
                <li class="job-item" id="qa_engineer"><a href=""> QA engineer</a></li>
                <li class="job-item"><a href="">QA team lead</a></li>
            </ol>
        </div>
    </div>



    <div class="career__path">
        <div class="path__image"><img src='https://svgshare.com/i/5Rq.svg' title='' /></div>
        <div class="path__description">
            <h2 class="path__title">Support team</h2>
            <ol class="path__jobs">
                <li class="job-item" id="tester"><a href=""> Junior tester</a></li>
                <li class="job-item"><a href=""> Automation test</a></li>
                <li class="job-item"><a href=""> QA Lead</a></li>
            </ol>
        </div>
    </div>
</div>]]></template>
    </sp_widget>
</record_update>
